import java.util.regex.Pattern

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.7.3'
    }
}

apply plugin: 'android'

android {
    lintOptions {
        abortOnError true
        ignoreWarnings true
    }
}

// Task to run ndk-build
task ndkBuild(type: Exec) {
    commandLine "$ndkDir/ndk-build", '-j', Runtime.runtime.availableProcessors()
}

// Task to put native libs into a jar file
task nativeArmV5LibsToJar(type: Zip, description: 'create a jar archive of the native armeabi libs') {
    destinationDir file("$buildDir/native-libs")
    baseName 'armeabi'
    extension 'jar'
    from fileTree(dir: 'libs', include: 'armeabi/*.so')
    into 'lib/'
}
task nativeArmV7LibsToJar(type: Zip, description: 'create a jar archive of the native armeabiv7a libs') {
    destinationDir file("$buildDir/native-libs")
    baseName 'armeabiv7a'
    extension 'jar'
    from fileTree(dir: 'libs', include: 'armeabi-v7a/*.so')
    into 'lib/'
}
task nativeX86LibsToJar(type: Zip, description: 'create a jar archive of the native x86 libs') {
    destinationDir file("$buildDir/native-libs")
    baseName 'x86'
    extension 'jar'
    from fileTree(dir: 'libs', include: 'x86/*.so')
    into 'lib/'
}
tasks.withType(JavaCompile) { compileTask -> compileTask.dependsOn(nativeArmV5LibsToJar, nativeArmV7LibsToJar, nativeX86LibsToJar) }
nativeArmV5LibsToJar.dependsOn 'ndkBuild'
nativeArmV7LibsToJar.dependsOn 'ndkBuild'
nativeX86LibsToJar.dependsOn 'ndkBuild'

clean.dependsOn 'nativeArmV5LibsToJar'

def getVersionCodeFromManifest(String prefix) {
    def manifestFile = file("AndroidManifest.xml")
    def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcher = pattern.matcher(manifestText)
    matcher.find()
    def version = prefix + matcher.group(1)
    println sprintf("Returning version %s", version)
    return Integer.parseInt("$version")
}




android {
    compileSdkVersion 19
    buildToolsVersion "19.0.1"

    signingConfigs {
        release
    }
    buildTypes {
        release {
	    //runProguard true
            proguardFile file('android.pro')
            proguardFile getDefaultProguardFile('proguard-android.txt')
            signingConfig signingConfigs.release
        }
    }

    //ABI Key: 6 – x86,   2 – ARMv7,   1 – ARMv5
    productFlavors {
        x86 {
            versionCode getVersionCodeFromManifest("6")
        }
        aV7 {
            versionCode getVersionCodeFromManifest("2")
        }
        aV5 {
            versionCode getVersionCodeFromManifest("1")
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
}

def Properties props = new Properties()
def propFile = new File('signing.properties')
if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        println 'signing.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
}

dependencies {
    repositories {
        mavenCentral()
    }
    compile fileTree(dir: 'libs', include: '*.jar')
    //compile fileTree(dir: 'build/native-libs', include: '*.jar')
    x86Compile fileTree(dir: 'build/native-libs', include: 'x86.jar')
    aV7Compile fileTree(dir: 'build/native-libs', include: 'armeabiv7a.jar')
    aV5Compile fileTree(dir: 'build/native-libs', include: 'armeabi.jar')
    compile 'com.google.code.findbugs:jsr305:2.0.2'
    compile 'com.nineoldandroids:library:2.4.0+'
    compile 'com.android.support:appcompat-v7:19.0.+'
    compile 'org.apache.commons:commons-compress:1.5'
    compile project(":Android-ViewPagerIndicator:library")
    compile project(":FileExplorer")
    compile project(":ViewPager3d:ViewPager3d")
}